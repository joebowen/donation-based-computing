# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: donation-based-computing

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  region: us-west-2
  stage: dev
  timeout: 300

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
     - Effect: Allow
       Action:
         - KMS:Decrypt
       Resource: ${self:custom.kmsSecrets.keyArn}
     - Effect: Allow
       Action:
         - ec2:DescribeAvailabilityZones
         - ec2:DescribeAccountAttributes
         - ec2:DescribeSubnets
         - autoscaling:DescribeLaunchConfigurations
         - autoscaling:DescribeAutoScalingGroups
         - autoscaling:DescribeScalingActivities
         - cloudformation:EstimateTemplateCost
         - cloudformation:DescribeStacks
       Resource: "*"
     - Effect: Allow
       Action:
         - autoscaling:CreateLaunchConfiguration
         - autoscaling:DeleteLaunchConfiguration
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:autoscaling:"
             - Ref: 'AWS::Region'
             - ":"
             - Ref: 'AWS::AccountId'
             - ":launchConfiguration:*:launchConfigurationName/"
             - "gimps-"
             - ${opt:stage, self:provider.stage}
             - "*"
     - Effect: Allow
       Action:
         - autoscaling:CreateAutoScalingGroup
         - autoscaling:DeleteAutoScalingGroup
         - autoscaling:UpdateAutoScalingGroup
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:autoscaling:"
             - Ref: 'AWS::Region'
             - ":"
             - Ref: 'AWS::AccountId'
             - ":autoScalingGroup:*:autoScalingGroupName/"
             - "gimps-"
             - ${opt:stage, self:provider.stage}
             - "*"
     - Effect: Allow
       Action:
         - cloudformation:CreateStack
         - cloudformation:DeleteStack
         - cloudformation:UpdateStack
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:cloudformation:"
             - Ref: 'AWS::Region'
             - ":"
             - Ref: 'AWS::AccountId'
             - ":stack/"
             - "gimps-"
             - ${opt:stage, self:provider.stage}
             - "/*"
     - Effect: Allow
       Action:
         - "s3:ListBucket"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - ${opt:stage, self:custom.client.bucketName}
     - Effect: Allow
       Action:
         - "s3:PutObject"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - ${opt:stage, self:custom.client.bucketName}
             - "/*"

# you can define service wide environment variables here
  environment:
    STACK_NAME: gimps-${opt:stage, self:provider.stage}
    PROJECT_NAME: The Great Internet Mersenne Prime Search
    PROJECT_URL: https://www.mersenne.org/
    MARGIN: 5 # In hours
    WEBSITE_BUCKET: ${opt:stage, self:custom.client.bucketName}

    # Bitcoin
    ACCOUNT_TYPE: blockio_bitcoin
    BLOCKIO_BITCOIN_API_KEY: ${self:custom.kmsSecrets.secrets.BLOCKIO_BITCOIN_API_KEY}
    BLOCKIO_SECRET_PIN: ${self:custom.kmsSecrets.secrets.BLOCKIO_SECRET_PIN}
    BLOCKIO_BITCOIN_ADDR: 16ppYndY97cFuQLY4MDjsjNHkXdXvyUXGc

    # Paypal
    # ACCOUNT_TYPE: paypal
    # PAYPAL_USERNAME: ${self:custom.kmsSecrets.secrets.PAYPAL_USERNAME}
    # PAYPAL_PASSWORD: ${self:custom.kmsSecrets.secrets.PAYPAL_PASSWORD}
    # PAYPAL_API_SIGNATURE: ${self:custom.kmsSecrets.secrets.PAYPAL_API_SIGNATURE}

plugins:
  - serverless-python-requirements
  - serverless-kms-secrets
  - serverless-finch

custom:
  pythonRequirements:
    dockerizePip: non-linux
    zip: true
  serverless-kms-secrets:
    secretsFile: kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml
  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}
  client:
    bucketName: donation-based-computing
    distributionFolder: client/dist

# you can add packaging information here
package:
  include:
    - libraries/**
    - templates/**
  exclude:
    - .idea/**
    - client/**
    - node_modules/**

functions:
  check-account:
    handler: handler.check_account
    events:
      - schedule: rate(1 hour)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(2 hours)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    S3Bucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${opt:stage, self:custom.client.bucketName}

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
